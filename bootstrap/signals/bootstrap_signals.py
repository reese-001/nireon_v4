"""
Bootstrap signal constants for NIREON V4.

This module defines all signal type constants used during the bootstrap process.
Using constants instead of magic strings ensures type safety and prevents typos.
"""

# Core system lifecycle signals
SYSTEM_BOOTSTRAPPED = "SYSTEM_BOOTSTRAPPED"
SYSTEM_INITIALIZATION_STARTED = "SYSTEM_INITIALIZATION_STARTED"
SYSTEM_SHUTDOWN_INITIATED = "SYSTEM_SHUTDOWN_INITIATED"

# L0 Abiogenesis signals
L0_ABIOGENESIS_COMPLETE = "L0_ABIOGENESIS_COMPLETE"
L0_EMERGENCE_STARTED = "L0_EMERGENCE_STARTED"
CORE_SERVICES_EMERGED = "CORE_SERVICES_EMERGED"
FEATURE_FLAGS_INITIALIZED = "FEATURE_FLAGS_INITIALIZED"

# Registry and component lifecycle signals
COMPONENT_REGISTRY_INITIALIZED = "COMPONENT_REGISTRY_INITIALIZED"
COMPONENT_REGISTERED = "COMPONENT_REGISTERED"
COMPONENT_INITIALIZATION_STARTED = "COMPONENT_INITIALIZATION_STARTED"
COMPONENT_INITIALIZATION_COMPLETE = "COMPONENT_INITIALIZATION_COMPLETE"
COMPONENT_VALIDATION_STARTED = "COMPONENT_VALIDATION_STARTED"
COMPONENT_VALIDATION_COMPLETE = "COMPONENT_VALIDATION_COMPLETE"
COMPONENT_HEALTH_CHECK_COMPLETE = "COMPONENT_HEALTH_CHECK_COMPLETE"

# Factory and service setup signals
FACTORIES_INITIALIZED = "FACTORIES_INITIALIZED"
MECHANISM_FACTORY_READY = "MECHANISM_FACTORY_READY"
INTERFACE_VALIDATOR_READY = "INTERFACE_VALIDATOR_READY"
DEPENDENCY_INJECTION_READY = "DEPENDENCY_INJECTION_READY"

# Configuration and manifest processing signals
CONFIGURATION_LOADED = "CONFIGURATION_LOADED"
MANIFEST_PROCESSING_STARTED = "MANIFEST_PROCESSING_STARTED"
MANIFEST_PROCESSING_COMPLETE = "MANIFEST_PROCESSING_COMPLETE"
MANIFEST_VALIDATION_COMPLETE = "MANIFEST_VALIDATION_COMPLETE"
SCHEMA_VALIDATION_COMPLETE = "SCHEMA_VALIDATION_COMPLETE"

# Service instantiation signals
SHARED_SERVICE_INSTANTIATED = "SHARED_SERVICE_INSTANTIATED"
MECHANISM_INSTANTIATED = "MECHANISM_INSTANTIATED"
OBSERVER_INSTANTIATED = "OBSERVER_INSTANTIATED"
MANAGER_INSTANTIATED = "MANAGER_INSTANTIATED"
ORCHESTRATION_COMMAND_REGISTERED = "ORCHESTRATION_COMMAND_REGISTERED"

# RBAC and security signals
RBAC_POLICIES_LOADED = "RBAC_POLICIES_LOADED"
RBAC_SETUP_COMPLETE = "RBAC_SETUP_COMPLETE"
SECURITY_POLICIES_APPLIED = "SECURITY_POLICIES_APPLIED"

# Error and warning signals
BOOTSTRAP_ERROR_OCCURRED = "BOOTSTRAP_ERROR_OCCURRED"
BOOTSTRAP_WARNING_ISSUED = "BOOTSTRAP_WARNING_ISSUED"
COMPONENT_INITIALIZATION_FAILED = "COMPONENT_INITIALIZATION_FAILED"
COMPONENT_VALIDATION_FAILED = "COMPONENT_VALIDATION_FAILED"
MANIFEST_SCHEMA_VALIDATION_FAILED = "MANIFEST_SCHEMA_VALIDATION_FAILED"

# Health and monitoring signals
BOOTSTRAP_HEALTH_CHECK_STARTED = "BOOTSTRAP_HEALTH_CHECK_STARTED"
BOOTSTRAP_HEALTH_CHECK_COMPLETE = "BOOTSTRAP_HEALTH_CHECK_COMPLETE"
COMPONENT_STATUS_UPDATED = "COMPONENT_STATUS_UPDATED"
BOOTSTRAP_METRICS_COLLECTED = "BOOTSTRAP_METRICS_COLLECTED"

# Phase completion signals
ABIOGENESIS_PHASE_COMPLETE = "ABIOGENESIS_PHASE_COMPLETE"
REGISTRY_SETUP_PHASE_COMPLETE = "REGISTRY_SETUP_PHASE_COMPLETE"
FACTORY_SETUP_PHASE_COMPLETE = "FACTORY_SETUP_PHASE_COMPLETE"
MANIFEST_PHASE_COMPLETE = "MANIFEST_PHASE_COMPLETE"
INITIALIZATION_PHASE_COMPLETE = "INITIALIZATION_PHASE_COMPLETE"
VALIDATION_PHASE_COMPLETE = "VALIDATION_PHASE_COMPLETE"
RBAC_PHASE_COMPLETE = "RBAC_PHASE_COMPLETE"

# Adaptation and self-modification signals
BOOTSTRAP_ADAPTATION_TRIGGERED = "BOOTSTRAP_ADAPTATION_TRIGGERED"
CONFIGURATION_UPDATED = "CONFIGURATION_UPDATED"
COMPONENT_RECONFIGURED = "COMPONENT_RECONFIGURED"

# Debugging and development signals
BOOTSTRAP_DEBUG_INFO = "BOOTSTRAP_DEBUG_INFO"
COMPONENT_METADATA_RESOLVED = "COMPONENT_METADATA_RESOLVED"
CONFIG_HIERARCHY_RESOLVED = "CONFIG_HIERARCHY_RESOLVED"
DEPENDENCY_GRAPH_CONSTRUCTED = "DEPENDENCY_GRAPH_CONSTRUCTED"

# Template and rule signals
TEMPLATE_REGISTERED = "TEMPLATE_REGISTERED"
RULE_REGISTERED = "RULE_REGISTERED"
REACTOR_RULES_LOADED = "REACTOR_RULES_LOADED"

# Future/planned signals for extensibility
PLUGIN_DISCOVERED = "PLUGIN_DISCOVERED"
EXTENSION_LOADED = "EXTENSION_LOADED"
HOT_RELOAD_TRIGGERED = "HOT_RELOAD_TRIGGERED"


# Signal categories for filtering and routing
SYSTEM_LIFECYCLE_SIGNALS = {
    SYSTEM_BOOTSTRAPPED,
    SYSTEM_INITIALIZATION_STARTED,
    SYSTEM_SHUTDOWN_INITIATED,
}

ABIOGENESIS_SIGNALS = {
    L0_ABIOGENESIS_COMPLETE,
    L0_EMERGENCE_STARTED,
    CORE_SERVICES_EMERGED,
    FEATURE_FLAGS_INITIALIZED,
}

COMPONENT_LIFECYCLE_SIGNALS = {
    COMPONENT_REGISTERED,
    COMPONENT_INITIALIZATION_STARTED,
    COMPONENT_INITIALIZATION_COMPLETE,
    COMPONENT_VALIDATION_STARTED,
    COMPONENT_VALIDATION_COMPLETE,
    COMPONENT_HEALTH_CHECK_COMPLETE,
}

ERROR_SIGNALS = {
    BOOTSTRAP_ERROR_OCCURRED,
    BOOTSTRAP_WARNING_ISSUED,
    COMPONENT_INITIALIZATION_FAILED,
    COMPONENT_VALIDATION_FAILED,
    MANIFEST_SCHEMA_VALIDATION_FAILED,
}

PHASE_COMPLETION_SIGNALS = {
    ABIOGENESIS_PHASE_COMPLETE,
    REGISTRY_SETUP_PHASE_COMPLETE,
    FACTORY_SETUP_PHASE_COMPLETE,
    MANIFEST_PHASE_COMPLETE,
    INITIALIZATION_PHASE_COMPLETE,
    VALIDATION_PHASE_COMPLETE,
    RBAC_PHASE_COMPLETE,
}

DEBUG_SIGNALS = {
    BOOTSTRAP_DEBUG_INFO,
    COMPONENT_METADATA_RESOLVED,
    CONFIG_HIERARCHY_RESOLVED,
    DEPENDENCY_GRAPH_CONSTRUCTED,
}


def is_error_signal(signal_type: str) -> bool:
    """Check if a signal type represents an error condition."""
    return signal_type in ERROR_SIGNALS


def is_lifecycle_signal(signal_type: str) -> bool:
    """Check if a signal type represents a lifecycle event."""
    return (signal_type in SYSTEM_LIFECYCLE_SIGNALS or 
            signal_type in COMPONENT_LIFECYCLE_SIGNALS or
            signal_type in ABIOGENESIS_SIGNALS)


def is_phase_completion_signal(signal_type: str) -> bool:
    """Check if a signal type represents phase completion."""
    return signal_type in PHASE_COMPLETION_SIGNALS


def get_signal_category(signal_type: str) -> str:
    """
    Get the category of a signal type.
    
    Args:
        signal_type: Signal type constant
        
    Returns:
        Category name
    """
    if signal_type in SYSTEM_LIFECYCLE_SIGNALS:
        return "system_lifecycle"
    elif signal_type in ABIOGENESIS_SIGNALS:
        return "abiogenesis"
    elif signal_type in COMPONENT_LIFECYCLE_SIGNALS:
        return "component_lifecycle"
    elif signal_type in ERROR_SIGNALS:
        return "error"
    elif signal_type in PHASE_COMPLETION_SIGNALS:
        return "phase_completion"
    elif signal_type in DEBUG_SIGNALS:
        return "debug"
    else:
        return "unknown"


# All signal constants for validation
ALL_BOOTSTRAP_SIGNALS = {
    SYSTEM_BOOTSTRAPPED,
    SYSTEM_INITIALIZATION_STARTED,
    SYSTEM_SHUTDOWN_INITIATED,
    L0_ABIOGENESIS_COMPLETE,
    L0_EMERGENCE_STARTED,
    CORE_SERVICES_EMERGED,
    FEATURE_FLAGS_INITIALIZED,
    COMPONENT_REGISTRY_INITIALIZED,
    COMPONENT_REGISTERED,
    COMPONENT_INITIALIZATION_STARTED,
    COMPONENT_INITIALIZATION_COMPLETE,
    COMPONENT_VALIDATION_STARTED,
    COMPONENT_VALIDATION_COMPLETE,
    COMPONENT_HEALTH_CHECK_COMPLETE,
    FACTORIES_INITIALIZED,
    MECHANISM_FACTORY_READY,
    INTERFACE_VALIDATOR_READY,
    DEPENDENCY_INJECTION_READY,
    CONFIGURATION_LOADED,
    MANIFEST_PROCESSING_STARTED,
    MANIFEST_PROCESSING_COMPLETE,
    MANIFEST_VALIDATION_COMPLETE,
    SCHEMA_VALIDATION_COMPLETE,
    SHARED_SERVICE_INSTANTIATED,
    MECHANISM_INSTANTIATED,
    OBSERVER_INSTANTIATED,
    MANAGER_INSTANTIATED,
    ORCHESTRATION_COMMAND_REGISTERED,
    RBAC_POLICIES_LOADED,
    RBAC_SETUP_COMPLETE,
    SECURITY_POLICIES_APPLIED,
    BOOTSTRAP_ERROR_OCCURRED,
    BOOTSTRAP_WARNING_ISSUED,
    COMPONENT_INITIALIZATION_FAILED,
    COMPONENT_VALIDATION_FAILED,
    MANIFEST_SCHEMA_VALIDATION_FAILED,
    BOOTSTRAP_HEALTH_CHECK_STARTED,
    BOOTSTRAP_HEALTH_CHECK_COMPLETE,
    COMPONENT_STATUS_UPDATED,
    BOOTSTRAP_METRICS_COLLECTED,
    ABIOGENESIS_PHASE_COMPLETE,
    REGISTRY_SETUP_PHASE_COMPLETE,
    FACTORY_SETUP_PHASE_COMPLETE,
    MANIFEST_PHASE_COMPLETE,
    INITIALIZATION_PHASE_COMPLETE,
    VALIDATION_PHASE_COMPLETE,
    RBAC_PHASE_COMPLETE,
    BOOTSTRAP_ADAPTATION_TRIGGERED,
    CONFIGURATION_UPDATED,
    COMPONENT_RECONFIGURED,
    BOOTSTRAP_DEBUG_INFO,
    COMPONENT_METADATA_RESOLVED,
    CONFIG_HIERARCHY_RESOLVED,
    DEPENDENCY_GRAPH_CONSTRUCTED,
    TEMPLATE_REGISTERED,
    RULE_REGISTERED,
    REACTOR_RULES_LOADED,
    PLUGIN_DISCOVERED,
    EXTENSION_LOADED,
    HOT_RELOAD_TRIGGERED,
}


def validate_signal_type(signal_type: str) -> bool:
    """
    Validate that a signal type is a known bootstrap signal.
    
    Args:
        signal_type: Signal type to validate
        
    Returns:
        True if valid, False otherwise
    """
    return signal_type in ALL_BOOTSTRAP_SIGNALS