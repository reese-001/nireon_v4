# version: "1.0"
# rules:
#   # DISABLE ALL DEBUG RULES BY DEFAULT
#   # Only enable specific ones when actually debugging
  
#   - id: "test_simple_trust_check"
#     description: "Test just trust score check"
#     namespace: "debug"
#     priority: 2
#     enabled: false  # DISABLED
#     conditions:
#       - type: "signal_type_match"
#         signal_type: "TrustAssessmentSignal"
#       - type: "payload_expression"
#         expression: "signal.trust_score > 6.0"
#     actions:
#       - type: "emit_signal"
#         signal_type: "GenerativeLoopFinishedSignal"
#         payload:
#           status: "debug_trust_check_passed"
#           final_idea_id: "debug"
#           final_trust_score: "{{ signal.trust_score }}"
#           reason: "trust_score_check_worked"
          
#   - id: "test_nested_payload"
#     description: "Test accessing nested payload"
#     namespace: "debug"
#     priority: 3
#     enabled: false  # DISABLED
#     conditions:
#       - type: "signal_type_match"
#         signal_type: "TrustAssessmentSignal"
#       - type: "payload_expression"
#         expression: "payload.payload.is_stable == True"
#     actions:
#       - type: "emit_signal"
#         signal_type: "GenerativeLoopFinishedSignal"
#         payload:
#           status: "debug_nested_payload_worked"
#           final_idea_id: "{{ payload.payload.idea_id }}"
#           reason: "nested_payload_access_worked"
          
#   - id: "test_combined_expression"
#     description: "Test combined trust and stable check"
#     namespace: "debug"
#     priority: 4
#     enabled: false  # DISABLED
#     conditions:
#       - type: "signal_type_match"
#         signal_type: "TrustAssessmentSignal"
#       - type: "payload_expression"
#         expression: "signal.trust_score > 6.0 and payload.payload.is_stable == True"
#     actions:
#       - type: "emit_signal"
#         signal_type: "GenerativeLoopFinishedSignal"
#         payload:
#           status: "debug_combined_check_passed"
#           final_idea_id: "{{ payload.payload.idea_id }}"
#           final_trust_score: "{{ signal.trust_score }}"
#           reason: "combined_expression_worked"
          
#   - id: "test_quantifier_trigger"
#     description: "Test triggering quantifier with simplified expression"
#     namespace: "debug"
#     priority: 5
#     enabled: false  # DISABLED
#     conditions:
#       - type: "signal_type_match"
#         signal_type: "TrustAssessmentSignal"
#       - type: "payload_expression"
#         expression: "signal.trust_score > 6.0 and payload.payload.is_stable == True"
#     actions:
#       - type: "trigger_component"
#         component_id: "quantifier_agent_primary"
#         input_data:
#           idea_id: "{{ payload.payload.idea_id }}"
#           idea_text: "Test idea text from debug rule"
#           assessment_details:
#             trust_score: "{{ signal.trust_score }}"
#             is_stable: "{{ payload.payload.is_stable }}"
            
#   - id: "test_payload_exists"
#     description: "Test if payload exists at all"
#     namespace: "debug"
#     priority: 1
#     enabled: false  # DISABLED
#     conditions:
#       - type: "signal_type_match"
#         signal_type: "TrustAssessmentSignal"
#       - type: "payload_expression"
#         expression: "exists(payload)"
#     actions:
#       - type: "emit_signal"
#         signal_type: "DebugSignal"
#         payload:
#           debug_message: "payload exists"
          
#   - id: "test_signal_payload_exists"
#     description: "Test if signal.payload exists"
#     namespace: "debug"
#     priority: 2
#     enabled: false  # DISABLED
#     conditions:
#       - type: "signal_type_match"
#         signal_type: "TrustAssessmentSignal"
#       - type: "payload_expression"
#         expression: "exists(signal.payload)"
#     actions:
#       - type: "emit_signal"
#         signal_type: "DebugSignal"
#         payload:
#           debug_message: "signal.payload exists"
          
#   - id: "test_direct_is_stable"
#     description: "Test accessing is_stable directly from payload"
#     namespace: "debug"
#     priority: 3
#     enabled: false  # DISABLED
#     conditions:
#       - type: "signal_type_match"
#         signal_type: "TrustAssessmentSignal"
#       - type: "payload_expression"
#         expression: "payload.is_stable == True"
#     actions:
#       - type: "emit_signal"
#         signal_type: "GenerativeLoopFinishedSignal"
#         payload:
#           status: "direct_is_stable_worked"
#           reason: "payload.is_stable access worked"
          
#   - id: "test_signal_payload_is_stable"
#     description: "Test accessing is_stable via signal.payload"
#     namespace: "debug"
#     priority: 4
#     enabled: false  # DISABLED
#     conditions:
#       - type: "signal_type_match"
#         signal_type: "TrustAssessmentSignal"
#       - type: "payload_expression"
#         expression: "signal.payload.is_stable == True"
#     actions:
#       - type: "emit_signal"
#         signal_type: "GenerativeLoopFinishedSignal"
#         payload:
#           status: "signal_payload_is_stable_worked"
#           reason: "signal.payload.is_stable access worked"
          
#   - id: "always_match_for_debug"
#     description: "Always match to prevent timeout"
#     namespace: "debug"
#     priority: 100
#     enabled: false  # DISABLED - This was causing premature completion signals!
#     conditions:
#       - type: "signal_type_match"
#         signal_type: "TrustAssessmentSignal"
#     actions:
#       - type: "emit_signal"
#         signal_type: "GenerativeLoopFinishedSignal"
#         payload:
#           status: "debug_fallback"
#           reason: "no_expression_matched"