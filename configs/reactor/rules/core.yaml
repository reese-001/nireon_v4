# nireon_v4\configs\reactor\rules\core.yaml
version: "1.0"
rules:
  - id: "core_seed_to_explorer_rule"
    description: "When a SeedSignal is detected, trigger the primary explorer."
    namespace: "core"
    priority: 10
    enabled: true
    conditions:
      - type: "signal_type_match"
        signal_type: "SeedSignal"
    actions:
      - type: "trigger_component"
        component_id: "explorer_instance_01"
        input_data_mapping:
          text: "payload.text"
          id: "payload.seed_idea_id"
          objective: "payload.metadata.objective"
          metadata:
            depth: 0
  - id: "idea_generated_to_trust_eval"
    description: "Evaluate trust for newly generated ideas"
    namespace: "core"
    priority: 20
    enabled: true
    conditions:
      - type: "signal_type_match"
        signal_type: "IdeaGeneratedSignal"
    actions:
      - type: "trigger_component"
        component_id: "sentinel_instance_01"
        input_data_mapping:
          target_idea_id: "payload.id"
          frame_id: "payload.frame_id"
  - id: "high_trust_recursive_exploration"
    description: "Take a high-trust idea and feed it back into the explorer for deeper exploration."
    namespace: "core_loop"
    priority: 30
    enabled: true
    conditions:
      - type: "signal_type_match"
        signal_type: "TrustAssessmentSignal"
      - type: "payload_expression"
        expression: "payload.assessment_details.is_stable == True and payload.assessment_details.metadata.depth < 4"
    actions:
      # This is the existing action that continues the loop
      - type: "trigger_component"
        component_id: "explorer_instance_01"
        input_data_mapping:
          text: "payload.assessment_details.metadata.idea_text"
          id: "payload.assessment_details.idea_id"
          objective: "payload.assessment_details.metadata.objective"
          metadata:
            depth: "{{ payload.assessment_details.metadata.depth + 1 }}"
      # This is the NEW action to unblock the test script
      - type: "emit_signal"
        signal_type: "GenerativeLoopFinishedSignal"
        payload:
          status: "completed_one_branch_and_recursing"
          final_idea_id: "{{ payload.idea_id }}"
          final_trust_score: "{{ payload.trust_score }}"
          final_depth: "{{ payload.assessment_details.metadata.depth }}"
  - id: "test_loop_finisher"
    description: "Emits a signal to tell the test runner the generative cycle is complete."
    namespace: "system"
    priority: 200 # A very low priority, runs after everything else
    enabled: true
    conditions:
      - type: "signal_type_match"
        signal_type: "TrustAssessmentSignal"
      - type: "payload_expression"
        expression: "payload.assessment_details.is_stable == False or (exists(payload.assessment_details.metadata.depth) and payload.assessment_details.metadata.depth >= 4)"
    actions:
      - type: "emit_signal"
        signal_type: "GenerativeLoopFinishedSignal"
        payload:
          status: "completed_one_branch"
          final_idea_id: "{{ payload.idea_id }}"
          final_trust_score: "{{ payload.trust_score }}"
          final_depth: "{{ payload.assessment_details.metadata.depth }}"
  - id: "error_notification"
    description: "Log and notify on critical errors"
    namespace: "system"
    priority: 1 # Highest priority for error handling
    enabled: true
    conditions:
      - type: "signal_type_match"
        signal_type: "ErrorSignal"
      - type: "payload_expression"
        expression: "payload.error_type == 'critical'"
    actions:
      - type: "emit_signal"
        signal_type: "SYSTEM_ALERT"
        payload:
          severity: "critical"
          requires_intervention: true