# config.yaml for inducing stagnation

# Bootstrap configuration
bootstrap:
  manifest: "configs/manifests/standard.yaml"
  strict_mode: false

# Execution settings
execution:
  timeout: 120 
  iterations: 1
  parallel_execution: false
  completion_condition:
    type: 'timeout' # Changed from 'all_assessed'

# Debug settings
debug:
  log_level: "INFO"
  enable_reactor_rules_check: true
  enable_quantifier_check: true
  quiet_loggers:
    - "httpx"
    - "httpcore"
    - "openai"
    - "anthropic"

# DAG Logging Configuration
dag_logging:
  enabled: true
  output_dir: "./dag_logs"
  visualization:
    auto_generate: true
    formats: [ "graphviz", "mermaid", "json" ]
  performance:
    buffer_size: 1000
    async_write: true

# Reporting configuration
reporting:
  report_dir: "./reports"
  generate_json: true
  generate_html: true
  generate_csv_summary: true
  include_dag_visualization: true

criteria:
  min_trust_score_for_quantifier: 5.0
  max_depth: 6

seeds:
  # - id: "prime counting"
  #   text: r"Let \(f(n)\) be the number of distinct prime divisors of the digit-sum of \(n^n\). For each \(k\ge 0\) define \[a_k=\min\{\,n\in\mathbb N\mid f(n)=k\,\}.\]"
  #   objective: r"Determine whether there exists an index \(m\in\mathbb N\) with \(a_{m+1}<a_m\); i.e. does the sequence \((a_k)\) ever decrease? Deliverables â€” follow **exactly** the five-part template below; do not alter any symbols or definitions. 1. **Definition** - restate \(f(n)\) and \(a_k\) verbatim.   2. **Small-n table** - compute \(n,\,s(n^n),\,f(n)\) for consecutive \(n\) (at least until  \(\max\{k\}\ge 10\) or a decrease is found).   3. **Extract \(a_k\)** - list the first values of \(a_k\) in order of \(k\).   4. **Check monotonicity** - state clearly whether any \(a_{k+1}<a_k\) occurs in the computed range.   5. **Conclusion** -    * If a decrease is found, give the first counter-example and prove it is minimal.    * If no decrease appears, provide a rigorous argument (computational bounds + number-theoretic reasoning) supporting monotonicity, or explain why the question remains open beyond the tested range.   Adhere strictly to the template; do **not** re-define \(f\), change variables, or introduce unrelated functions."
  #   tags: ["math", "philosophy", "theory"]


- id: "formal_math_seed"
  text: "What is the sum of the digits of the 6th perfect number?"
  objective: "Formally compute the value and verify the system's ability to handle number theory problems."
  metadata:
    tags: ['math']
    is_formal: true



  